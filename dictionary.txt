
G::= {DEFINITIONS}? "START" ENTITY+ "END"

DEFINITIONS ::= DEFN+ 

ENTITY ::= (STATEMENT | LABEL_DECL)

DEFN ::= "DEFN" ID "BR_OPEN" ID "BR_CLOSE" COMPL_STATEMENT 

COMPL_STATEMENT ::= "FBR_OPEN" STATEMENT+ "FBR_CLOSE"

INSTRUCTION ::=  COMPL_STATEMENT | STATEMENT 

STATEMENT ::= "SOL" ( COND | DECL | CYCLE | ASS | STD_FUNC_CALL | FUNC_CALL | RETURN |  LABEL_JUMP) "EOL"

COND ::= "IF" "BR_OPEN" EXP "BR_CLOSE" "DO" INSTRUCTION ( "ELSE" "DO" INSTRUCTION)?

ASS ::= ID "ASSGN" EXP

RETURN ::= "RET" EXP

DECL ::= "DECL" (ID | ASSGN)

STD_FUNC_CALL ::= STD_FUNC_ID "BR_OPEN" ID_VAR "BR_CLOSE"

FUNC_CALL ::= ID "BR_OPEN" EXP "BR_CLOSE"

CYCLE ::= "WHILE" "BR_OPEN" EXP "BR_CLOSE" "DO" INSTRUCTION

LABEL_JUMP ::= "GOTO" ID

LABEL_DECL ::= "SOL" LABEL ID "EOL"

EXP ::= E { "CMP_SIGN" E}?

//CMP_SIGN ::= "<" | ">" | "<=" | ">=" | "==" | "!="

E ::= T{[+-]T}*

T ::= M{[*/]M}*

M ::= P {^P}?

P ::= {"NEG"}? '('R')' | N | CALC_FUNC | FUNC_CALL | ID

{
    {"petrificustotalus", END      , "end of code"         , 0},
    {"aberto"           , SOL      , "start of the line"   , 0},
    {"flipendo"         , EOL      , "end of the line"     , 0},
    {"accio"            , GOTO     , "goto"                , 0},
    {"geminio"          , LABEL    , "label"               , 0},
    {"expelliarmus"     , RET      , "return"              , 0},
    {"imperio"          , DO       , "do"                  , 0},
    {"confundo"         , WHILE    , "while"               , 0},
    {"bombradamaxima"   , BREAK    , "break"               , 0},
    {"sectumsempra"     , CONT     , "continue"            , 0},
    {"reducto"          , IF       , "if"                  , 0},
    {"aguamenti"        , ELSE     , "else"                , 0},
    {"alohomora"        , BR_OPEN  , "open bracket"        , 0},
    {"avadacedavra"     , BR_CLOSE , "close bracket"       , 0},
    {"riddikulus"       , ASS      , "assignment"          , 0},
    {"wingardiumleviosa", START    , "start of the code"   , 0},
    {"stupefy"          , DECL     , "declaration"         , 0},
    {"colorvaria"       , DEFN     , "func definition"     , 0},
    {"cursed"           , NEG      , "negative"            , 0},
    {"confringo"        , FBR_OPEN , "figure_bracket open" , 0},
    {"lumos"            , FBR_CLOSE, "fugire bracket close", 0}
};

const static struct Std_function Std_functions[] =
{
    {"crucio"  , SCAN,  0, "scan" },
    {"protego" , PRINT, 0, "print"}
};

const static struct Calc_function Calc_functions[] = 
{
    {"sin"   , SIN   , 0}, //
    {"cos"   , COS   , 0}, //
    {"sqrt"  , SQRT  , 0},
    {"tg"    , TG    , 0}, //
    {"ctg"   , CTG   , 0},
    {"ln"    , LN    , 0}, // 
    {"arccos", ARCCOS, 0}, 
    {"arcsin", ARCSIN, 0}, //
    {"arctg" , ARCTG , 0}, //
    {"atcctg", ARCCTG, 0},
    {"sqr"   , SQR   , 0}
};